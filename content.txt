== 추가해야할 사항 =========================================================================================================
WebConfig.java
- customizeRegistration

RootConfig.java
- 다중 데이터소스 트랜잭션 묶기
- Eh캐시 설정
- 다국어 처리

Servlet.java
- 
















===========================================================================================================
**어노테이션** 
@Component
- 스프링에게 해당 클래스가 스프링에서 관리해야 하는 대상임을 표시해준다.
 
@Data
- Lombok의 setter를 생성하는 기능과 생성자, toString() 등을 자동으로 생성해준다.

@Setter 
- 자동으로 컴파일시 setter()를 생성해준다.
- onMethod 속성은 생성되는 setter()에 @Autowired 어노테이션을 추가해준다.

@ComponentScan
- 스프링은 클래스에서 객체를 생성하고 객체들의 의존성에 대한 처리 작업까지 내부에서 모든 것이 처리됩니다.
스프링에서 관리되는 객체를 흔히 빈(Bean) 이라고 하고, 이에 대한 설정을 자동으로 해준다.
- xml의 <context:component-scan> 동일하다.

@@Configuration
- 

@RunWith
- test 용도
@ContextConfiguration
- test 용도
@Test
- test 용도

@Log4j


@Configuration 어노테이션은 이 클래스가 스프링 설정용 클래스라는 것을 알려주는 역할을 한다.
•@EnableTransactionManagement 어노테이션은 xml의 <tx:*> 태그를 대체한다.
•@ComponentScan 어노테이션은 xml의 <context:component-scan> 태그를 대체한다.
•@Bean 어노테이션을 이용하여 xml에서 <bean> 태그로 정의한 빈을 대체한다.
•PropertySourcesPlaceholderConfigurer 의 경우 static으로 선언해줘야 한다. 자세한 내용은 아래 링크를 참고하도록 하자.

PropertyPlaceHolder 설정시 @PostConstruct가 호출되지 않는 현상
Annotation Type Bean











***
1. RestApi 형태로 구현
2. 트랜잭션
3. 로그 설정
4. 인터셉터 설정
5. 권한 설정
6. 